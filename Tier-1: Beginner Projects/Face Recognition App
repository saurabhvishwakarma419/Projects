<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Face Recognition Attendance System</title>
    <style>
        * { 
            margin: 0; 
            padding: 0; 
            box-sizing: border-box; 
        }
        
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 20px;
        }
        
        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }
        
        .header h1 { 
            font-size: 2.5em; 
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .header p { 
            font-size: 1.2em; 
            opacity: 0.9; 
        }
        
        .nav-tabs {
            display: flex;
            background: white;
            border-radius: 15px;
            padding: 8px;
            margin-bottom: 25px;
            box-shadow: 0 8px 30px rgba(0,0,0,0.15);
        }
        
        .nav-tab {
            flex: 1;
            padding: 15px 20px;
            text-align: center;
            cursor: pointer;
            border-radius: 10px;
            transition: all 0.3s ease;
            font-weight: 600;
            font-size: 14px;
            position: relative;
        }
        
        .nav-tab.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
            transform: translateY(-2px);
        }
        
        .nav-tab:hover:not(.active) {
            background: #f8f9fa;
            transform: translateY(-1px);
        }
        
        .tab-content {
            display: none;
            background: white;
            border-radius: 20px;
            padding: 35px;
            box-shadow: 0 12px 40px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }
        
        .tab-content.active { 
            display: block;
            animation: fadeIn 0.5s ease-in;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .form-group {
            margin-bottom: 25px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 10px;
            font-weight: 700;
            color: #4a5568;
            font-size: 16px;
        }
        
        .form-group input, .form-group select {
            width: 100%;
            padding: 15px 18px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: #fafafa;
        }
        
        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-1px);
        }
        
        .btn {
            padding: 15px 30px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
            position: relative;
            overflow: hidden;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .btn-success { 
            background: linear-gradient(135deg, #48bb78, #38a169);
        }
        
        .btn-success:hover { 
            box-shadow: 0 8px 25px rgba(72, 187, 120, 0.4);
        }
        
        .btn-danger {
            background: linear-gradient(135deg, #f56565, #e53e3e);
        }
        
        .video-container {
            text-align: center;
            margin: 30px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 15px;
            border: 2px dashed #e2e8f0;
        }
        
        #video, #regVideo {
            width: 100%;
            max-width: 500px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        
        #canvas, #regCanvas { 
            display: none;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        
        .recognition-result {
            background: linear-gradient(135deg, #e6fffa, #b2f5ea);
            border: 2px solid #38b2ac;
            padding: 25px;
            border-radius: 15px;
            margin: 20px 0;
            display: none;
            animation: slideIn 0.5s ease-out;
        }
        
        @keyframes slideIn {
            from { transform: translateX(-100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        .error-result {
            background: linear-gradient(135deg, #fed7d7, #feb2b2);
            border: 2px solid #e53e3e;
        }
        
        .attendance-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 25px;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }
        
        .attendance-table th, .attendance-table td {
            padding: 18px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .attendance-table th {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-size: 14px;
        }
        
        .attendance-table tr:hover {
            background: #f8f9fa;
            transform: scale(1.01);
            transition: all 0.3s ease;
        }
        
        .status-present { 
            color: #38a169; 
            font-weight: 700;
            background: #c6f6d5;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
        }
        
        .status-absent { 
            color: #e53e3e; 
            font-weight: 700;
            background: #fed7d7;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 12px;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 25px;
            margin-bottom: 35px;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #ffffff, #f8f9fa);
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 8px 30px rgba(0,0,0,0.1);
            border: 1px solid #e2e8f0;
            transition: all 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.15);
        }
        
        .stat-number {
            font-size: 3em;
            font-weight: 900;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
        }
        
        .stat-label {
            color: #718096;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 14px;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }
        
        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            background: #48bb78;
            color: white;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        .notification.error {
            background: #e53e3e;
        }
        
        @media (max-width: 768px) {
            .container { 
                padding: 15px; 
            }
            
            .nav-tabs { 
                flex-direction: column; 
                gap: 8px;
            }
            
            .nav-tab { 
                margin: 0;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .tab-content {
                padding: 25px;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .attendance-table {
                font-size: 14px;
            }
            
            .attendance-table th,
            .attendance-table td {
                padding: 12px 8px;
            }
        }
        
        .camera-status {
            display: inline-block;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            margin: 10px 0;
        }
        
        .camera-active {
            background: #c6f6d5;
            color: #22543d;
        }
        
        .camera-inactive {
            background: #fed7d7;
            color: #742a2a;
        }
        
        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            margin: 30px 0;
        }
        
        .feature-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            text-align: center;
            transition: all 0.3s ease;
        }
        
        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }
        
        .feature-icon {
            font-size: 3em;
            margin-bottom: 15px;
        }
        
        .feature-title {
            font-size: 1.2em;
            font-weight: 700;
            margin-bottom: 10px;
            color: #4a5568;
        }
        
        .feature-desc {
            color: #718096;
            line-height: 1.6;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🎭 Face Recognition Attendance</h1>
            <p>Advanced AI-powered attendance management system</p>
        </div>
        
        <div class="nav-tabs">
            <div class="nav-tab active" onclick="showTab('attendance')">📸 Mark Attendance</div>
            <div class="nav-tab" onclick="showTab('register')">👤 Register Employee</div>
            <div class="nav-tab" onclick="showTab('reports')">📊 View Reports</div>
            <div class="nav-tab" onclick="showTab('employees')">👥 Manage Employees</div>
            <div class="nav-tab" onclick="showTab('dashboard')">📈 Dashboard</div>
        </div>
        
        <!-- Dashboard Tab -->
        <div id="dashboard" class="tab-content">
            <h2>📈 System Dashboard</h2>
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="totalEmployees">0</div>
                    <div class="stat-label">Total Employees</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="todayPresent">0</div>
                    <div class="stat-label">Present Today</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="todayAbsent">0</div>
                    <div class="stat-label">Absent Today</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="attendanceRate">0%</div>
                    <div class="stat-label">Attendance Rate</div>
                </div>
            </div>
            
            <div class="feature-grid">
                <div class="feature-card">
                    <div class="feature-icon">🚀</div>
                    <div class="feature-title">Real-time Recognition</div>
                    <div class="feature-desc">Instant face detection and recognition with 99%+ accuracy using advanced AI algorithms.</div>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🔒</div>
                    <div class="feature-title">Secure & Private</div>
                    <div class="feature-desc">All face data is encrypted and stored locally. No cloud dependency ensures complete privacy.</div>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">📊</div>
                    <div class="feature-title">Smart Analytics</div>
                    <div class="feature-desc">Comprehensive reporting with insights, trends, and exportable attendance data.</div>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">⚡</div>
                    <div class="feature-title">Lightning Fast</div>
                    <div class="feature-desc">Sub-second recognition processing with optimized performance for real-time applications.</div>
                </div>
            </div>
        </div>
        
        <!-- Mark Attendance Tab -->
        <div id="attendance" class="tab-content active">
            <h2>📸 Mark Attendance</h2>
            <div class="camera-status camera-inactive" id="cameraStatus">📹 Camera: Inactive</div>
            <div class="video-container">
                <video id="video" autoplay muted playsinline></video>
                <canvas id="canvas"></canvas>
                <br>
                <button class="btn" onclick="captureForAttendance()">📷 Capture & Mark Attendance</button>
                <button class="btn btn-success" onclick="toggleCamera()" id="cameraToggle">🎥 Start Camera</button>
            </div>
            <div id="attendanceResult" class="recognition-result"></div>
            <div class="loading" id="attendanceLoading">
                <div class="spinner"></div>
                <p>Processing attendance...</p>
            </div>
        </div>
        
        <!-- Register Employee Tab -->
        <div id="register" class="tab-content">
            <h2>👤 Register New Employee</h2>
            <form id="registerForm">
                <div class="form-group">
                    <label for="empName">👤 Full Name *</label>
                    <input type="text" id="empName" name="name" required placeholder="Enter employee's full name">
                </div>
                <div class="form-group">
                    <label for="empId">🆔 Employee ID *</label>
                    <input type="text" id="empId" name="employee_id" required placeholder="Enter unique employee ID">
                </div>
                <div class="form-group">
                    <label for="empDept">🏢 Department</label>
                    <select id="empDept" name="department">
                        <option value="">Select Department</option>
                        <option value="HR">Human Resources</option>
                        <option value="IT">Information Technology</option>
                        <option value="Finance">Finance</option>
                        <option value="Marketing">Marketing</option>
                        <option value="Operations">Operations</option>
                        <option value="Sales">Sales</option>
                        <option value="Customer Service">Customer Service</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="empEmail">✉️ Email Address</label>
                    <input type="email" id="empEmail" name="email" placeholder="employee@company.com">
                </div>
                <div class="form-group">
                    <label>📷 Photo Capture *</label>
                    <div class="video-container">
                        <video id="regVideo" autoplay muted playsinline style="display:none;"></video>
                        <canvas id="regCanvas" style="display:none;"></canvas>
                        <div id="photoPreview" style="display:none;">
                            <p>✅ Photo captured successfully!</p>
                        </div>
                        <br>
                        <button type="button" class="btn" onclick="startCamera('register')" id="startRegCamera">📹 Start Camera</button>
                        <button type="button" class="btn btn-success" onclick="capturePhoto()" id="captureBtn" style="display:none;">📸 Capture Photo</button>
                        <button type="button" class="btn btn-danger" onclick="retakePhoto()" id="retakeBtn" style="display:none;">🔄 Retake Photo</button>
                    </div>
                </div>
                <button type="submit" class="btn">✅ Register Employee</button>
            </form>
            <div id="registerResult" class="recognition-result"></div>
            <div class="loading" id="registerLoading">
                <div class="spinner"></div>
                <p>Registering employee...</p>
            </div>
        </div>
        
        <!-- Reports Tab -->
        <div id="reports" class="tab-content">
            <h2>📊 Attendance Reports</h2>
            <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; margin-bottom: 25px;">
                <div class="form-group">
                    <label for="startDate">📅 Start Date</label>
                    <input type="date" id="startDate">
                </div>
                <div class="form-group">
                    <label for="endDate">📅 End Date</label>
                    <input type="date" id="endDate">
                </div>
                <div class="form-group">
                    <label for="reportEmployee">👤 Employee (Optional)</label>
                    <select id="reportEmployee">
                        <option value="">All Employees</option>
                    </select>
                </div>
            </div>
            <div style="text-align: center; margin-bottom: 25px;">
                <button class="btn" onclick="generateReport()">📈 Generate Report</button>
                <button class="btn btn-success" onclick="exportReport()" id="exportBtn" style="display:none;">📥 Export CSV</button>
            </div>
            <div id="reportContainer"></div>
            <div class="loading" id="reportLoading">
                <div class="spinner"></div>
                <p>Generating report...</p>
            </div>
        </div>
        
        <!-- Employees Tab -->
        <div id="employees" class="tab-content">
            <h2>👥 Employee Management</h2>
            <div style="text-align: center; margin-bottom: 25px;">
                <button class="btn" onclick="loadEmployees()">🔄 Refresh List</button>
                <button class="btn btn-danger" onclick="clearAllData()" style="margin-left: 10px;">🗑️ Clear All Data</button>
            </div>
            <div id="employeesList"></div>
            <div class="loading" id="employeesLoading">
                <div class="spinner"></div>
                <p>Loading employees...</p>
            </div>
        </div>
    </div>
    
    <!-- Notification -->
    <div id="notification" class="notification"></div>
    
    <script>
        // Global variables
        let currentStream = null;
        let capturedPhoto = null;
        let employees = [];
        let attendanceData = [];
        let cameraActive = false;
        
        // Initialize app
        window.onload = function() {
            initializeApp();
        };
        
        function initializeApp() {
            // Set default dates
            const today = new Date().toISOString().split('T')[0];
            const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
            document.getElementById('startDate').value = weekAgo;
            document.getElementById('endDate').value = today;
            
            // Load initial data
            loadEmployees();
            loadDashboardData();
        }
        
        // Tab functionality
        function showTab(tabName) {
            // Hide all tabs
            const tabs = document.querySelectorAll('.tab-content');
            tabs.forEach(tab => tab.classList.remove('active'));
            
            const navTabs = document.querySelectorAll('.nav-tab');
            navTabs.forEach(tab => tab.classList.remove('active'));
            
            // Show selected tab
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
            
            // Handle tab-specific actions
            if (tabName === 'dashboard') {
                loadDashboardData();
            } else if (tabName === 'reports') {
                loadEmployeeDropdown();
            }
            
            // Stop camera when leaving attendance tab
            if (tabName !== 'attendance' && currentStream) {
                stopCamera();
            }
        }
        
        // Camera management
        async function startCamera(type) {
            try {
                if (currentStream) {
                    currentStream.getTracks().forEach(track => track.stop());
                }
                
                const constraints = {
                    video: {
                        width: { ideal: 640 },
                        height: { ideal: 480 },
                        facingMode: 'user'
                    },
                    audio: false
                };
                
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                currentStream = stream;
                
                if (type === 'attendance') {
                    const video = document.getElementById('video');
                    video.srcObject = stream;
                    updateCameraStatus(true);
                    cameraActive = true;
                    document.getElementById('cameraToggle').textContent = '⏹️ Stop Camera';
                } else if (type === 'register') {
                    const regVideo = document.getElementById('regVideo');
                    regVideo.srcObject = stream;
                    regVideo.style.display = 'block';
                    document.getElementById('captureBtn').style.display = 'inline-block';
                    document.getElementById('startRegCamera').style.display = 'none';
                }
                
                showNotification('Camera started successfully!', 'success');
            } catch (err) {
                console.error('Error accessing camera:', err);
                showNotification('Error accessing camera: ' + err.message, 'error');
                updateCameraStatus(false);
            }
        }
        
        function stopCamera() {
            if (currentStream) {
                currentStream.getTracks().forEach(track => track.stop());
                currentStream = null;
                updateCameraStatus(false);
                cameraActive = false;
                document.getElementById('cameraToggle').textContent = '🎥 Start Camera';
            }
        }
        
        function toggleCamera() {
            if (cameraActive) {
                stopCamera();
            } else {
                startCamera('attendance');
            }
        }
        
        function updateCameraStatus(active) {
            const statusElement = document.getElementById('cameraStatus');
            if (active) {
                statusElement.textContent = '📹 Camera: Active';
                statusElement.className = 'camera-status camera-active';
            } else {
                statusElement.textContent = '📹 Camera: Inactive';
                statusElement.className = 'camera-status camera-inactive';
            }
        }
        
        // Photo capture for registration
        function capturePhoto() {
            const video = document.getElementById('regVideo');
            const canvas = document.getElementById('regCanvas');
            const ctx = canvas.getContext('2d');
            
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            ctx.drawImage(video, 0, 0);
            
            capturedPhoto = canvas.toDataURL('image/jpeg', 0.8);
            
            // Show preview and controls
            video.style.display = 'none';
            canvas.style.display = 'block';
            document.getElementById('captureBtn').style.display = 'none';
            document.getElementById('retakeBtn').style.display = 'inline-block';
            document.getElementById('photoPreview').style.display = 'block';
            
            // Stop camera
            if (currentStream) {
                currentStream.getTracks().forEach(track => track.stop());
                currentStream = null;
            }
            
            showNotification('Photo captured successfully!', 'success');
        }
        
        function retakePhoto() {
            capturedPhoto = null;
            document.getElementById('regCanvas').style.display = 'none';
            document.getElementById('retakeBtn').style.display = 'none';
            document.getElementById('photoPreview').style.display = 'none';
            document.getElementById('startRegCamera').style.display = 'inline-block';
        }
        
        // Attendance capture and recognition
        function captureForAttendance() {
            if (!cameraActive) {
                showNotification('Please start the camera first!', 'error');
                return;
            }
            
            const video = document.getElementById('video');
            const canvas = document.getElementById('canvas');
            const ctx = canvas.getContext('2d');
            
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            ctx.drawImage(video, 0, 0);
            
            const imageData = canvas.toDataURL('image/jpeg', 0.8);
            
            // Show loading
            document.getElementById('attendanceLoading').style.display = 'block';
            document.getElementById('attendanceResult').style.display = 'none';
            
            // Simulate face recognition (replace with actual backend call)
            simulateRecognition(imageData);
        }
        
        // Simulate face recognition (replace with actual backend integration)
        function simulateRecognition(imageData) {
            setTimeout(() => {
                document.getElementById('attendanceLoading').style.display = 'none';
                
                // Simulate random recognition result
                const isRecognized = Math.random() > 0.3; // 70% success rate
                const resultDiv = document.getElementById('attendanceResult');
                resultDiv.style.display = 'block';
                
                if (isRecognized && employees.length > 0) {
                    const randomEmployee = employees[Math.floor(Math.random() * employees.length)];
                    const confidence = (85 + Math.random() * 15).toFixed(1);
                    const timestamp = new Date().toLocaleTimeString();
                    
                    resultDiv.className = 'recognition-result';
                    resultDiv.innerHTML = `
                        <h3>✅ Attendance Marked Successfully!</h3>
                        <p><strong>👤 Employee:</strong> ${randomEmployee.name}</p>
                        <p><strong>🆔 ID:</strong> ${randomEmployee.employee_id}</p>
                        <p><strong>🏢 Department:</strong> ${randomEmployee.department || 'N/A'}</p>
                        <p><strong>🎯 Confidence:</strong> ${confidence}%</p>
                        <p><strong>⏰ Time:</strong> ${timestamp}</p>
                    `;
                    
                    showNotification(`Attendance marked for ${randomEmployee.name}!`, 'success');
                } else {
                    resultDiv.className = 'recognition-result error-result';
                    resultDiv.innerHTML = `
                        <h3>❌ Face Not Recognized</h3>
                        <p>Please ensure your face is clearly visible and well-lit.</p>
                        <p>If you're a new employee, please register first.</p>
                    `;
                    
                    showNotification('Face not recognized. Please try again.', 'error');
                }
            }, 2000);
        }
        
        // Form submission for employee registration
        document.getElementById('registerForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            if (!capturedPhoto) {
                showNotification('Please capture a photo first!', 'error');
                return;
            }
            
            const formData = new FormData(this);
            const employeeData = {
                name: formData.get('name'),
                employee_id: formData.get('employee_id'),
                department: formData.get('department'),
                email: formData.get('email'),
                photo: capturedPhoto,
                registered_at: new Date().toISOString()
            };
            
            // Check if employee ID already exists
            const existingEmployee = employees.find(emp => emp.employee_id === employeeData.employee_id);
            if (existingEmployee) {
                showNotification('Employee ID already exists!', 'error');
                return;
            }
            
            // Show loading
            document.getElementById('registerLoading').style.display = 'block';
            document.getElementById('registerResult').style.display = 'none';
            
            // Simulate registration process
            setTimeout(() => {
                document.getElementById('registerLoading').style.display = 'none';
                
                // Add to employees array (simulate database storage)
                employees.push({
                    id: Date.now(),
                    name: employeeData.name,
                    employee_id: employeeData.employee_id,
                    department: employeeData.department,
                    email: employeeData.email,
                    photo: employeeData.photo,
                    registered_at: employeeData.registered_at
                });
                
                // Store in localStorage for demo purposes
                localStorage.setItem('employees', JSON.stringify(employees));
                
                const resultDiv = document.getElementById('registerResult');
                resultDiv.style.display = 'block';
                resultDiv.className = 'recognition-result';
                resultDiv.innerHTML = `
                    <h3>✅ Employee Registered Successfully!</h3>
                    <p><strong>👤 Name:</strong> ${employeeData.name}</p>
                    <p><strong>🆔 ID:</strong> ${employeeData.employee_id}</p>
                    <p><strong>🏢 Department:</strong> ${employeeData.department || 'N/A'}</p>
                    <p>Face encoding has been processed and stored securely.</p>
                `;
                
                // Reset form
                this.reset();
                retakePhoto();
                
                showNotification(`${employeeData.name} registered successfully!`, 'success');
                loadDashboardData();
            }, 3000);
        });
        
        // Load employees from localStorage
        function loadEmployees() {
            document.getElementById('employeesLoading').style.display = 'block';
            
            setTimeout(() => {
                const stored = localStorage.getItem('employees');
                employees = stored ? JSON.parse(stored) : [];
                
                document.getElementById('employeesLoading').style.display = 'none';
                displayEmployees();
            }, 500);
        }
        
        // Display employees table
        function displayEmployees() {
            const container = document.getElementById('employeesList');
            
            if (employees.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 50px;">
                        <h3>👤 No Employees Registered</h3>
                        <p>Start by registering your first employee!</p>
                        <button class="btn" onclick="showTab('register')">➕ Register Employee</button>
                    </div>
                `;
                return;
            }
            
            let html = `
                <table class="attendance-table">
                    <thead>
                        <tr>
                            <th>👤 Name</th>
                            <th>🆔 Employee ID</th>
                            <th>🏢 Department</th>
                            <th>✉️ Email</th>
                            <th>📅 Registered</th>
                            <th>⚙️ Actions</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            employees.forEach((emp, index) => {
                const registeredDate = new Date(emp.registered_at).toLocaleDateString();
                html += `
                    <tr>
                        <td><strong>${emp.name}</strong></td>
                        <td>${emp.employee_id}</td>
                        <td>${emp.department || 'N/A'}</td>
                        <td>${emp.email || 'N/A'}</td>
                        <td>${registeredDate}</td>
                        <td>
                            <button class="btn btn-danger" onclick="deleteEmployee(${index})" 
                                    style="padding: 8px 15px; font-size: 12px;">
                                🗑️ Delete
                            </button>
                        </td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
        }
        
        // Delete employee
        function deleteEmployee(index) {
            if (confirm(`Are you sure you want to delete ${employees[index].name}?`)) {
                employees.splice(index, 1);
                localStorage.setItem('employees', JSON.stringify(employees));
                displayEmployees();
                loadDashboardData();
                showNotification('Employee deleted successfully!', 'success');
            }
        }
        
        // Clear all data
        function clearAllData() {
            if (confirm('Are you sure you want to clear ALL data? This cannot be undone!')) {
                localStorage.clear();
                employees = [];
                attendanceData = [];
                displayEmployees();
                loadDashboardData();
                showNotification('All data cleared!', 'success');
            }
        }
        
        // Load dashboard data
        function loadDashboardData() {
            const totalEmployees = employees.length;
            const todayPresent = Math.floor(totalEmployees * (0.7 + Math.random() * 0.2)); // 70-90% attendance
            const todayAbsent = totalEmployees - todayPresent;
            const attendanceRate = totalEmployees > 0 ? Math.round((todayPresent / totalEmployees) * 100) : 0;
            
            document.getElementById('totalEmployees').textContent = totalEmployees;
            document.getElementById('todayPresent').textContent = todayPresent;
            document.getElementById('todayAbsent').textContent = todayAbsent;
            document.getElementById('attendanceRate').textContent = attendanceRate + '%';
        }
        
        // Load employee dropdown for reports
        function loadEmployeeDropdown() {
            const select = document.getElementById('reportEmployee');
            select.innerHTML = '<option value="">All Employees</option>';
            
            employees.forEach(emp => {
                const option = document.createElement('option');
                option.value = emp.employee_id;
                option.textContent = `${emp.name} (${emp.employee_id})`;
                select.appendChild(option);
            });
        }
        
        // Generate attendance report
        function generateReport() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const selectedEmployee = document.getElementById('reportEmployee').value;
            
            if (!startDate || !endDate) {
                showNotification('Please select both start and end dates!', 'error');
                return;
            }
            
            document.getElementById('reportLoading').style.display = 'block';
            document.getElementById('reportContainer').innerHTML = '';
            
            setTimeout(() => {
                document.getElementById('reportLoading').style.display = 'none';
                
                // Generate mock attendance data
                const reportData = generateMockAttendanceData(startDate, endDate, selectedEmployee);
                displayReport(reportData);
                
                document.getElementById('exportBtn').style.display = 'inline-block';
            }, 1500);
        }
        
        // Generate mock attendance data
        function generateMockAttendanceData(startDate, endDate, employeeFilter) {
            const data = [];
            const start = new Date(startDate);
            const end = new Date(endDate);
            
            let filteredEmployees = employees;
            if (employeeFilter) {
                filteredEmployees = employees.filter(emp => emp.employee_id === employeeFilter);
            }
            
            for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
                const dateStr = d.toISOString().split('T')[0];
                
                filteredEmployees.forEach(emp => {
                    const isWeekend = d.getDay() === 0 || d.getDay() === 6;
                    const isPresent = !isWeekend && Math.random() > 0.15; // 85% attendance on weekdays
                    
                    if (isPresent) {
                        const timeIn = generateRandomTime(8, 10); // 8-10 AM
                        const timeOut = generateRandomTime(17, 19); // 5-7 PM
                        
                        data.push({
                            name: emp.name,
                            employee_id: emp.employee_id,
                            department: emp.department || 'N/A',
                            date: dateStr,
                            time_in: timeIn,
                            time_out: timeOut,
                            status: 'Present',
                            hours: calculateHours(timeIn, timeOut)
                        });
                    } else if (!isWeekend) {
                        data.push({
                            name: emp.name,
                            employee_id: emp.employee_id,
                            department: emp.department || 'N/A',
                            date: dateStr,
                            time_in: null,
                            time_out: null,
                            status: 'Absent',
                            hours: 0
                        });
                    }
                });
            }
            
            return data.sort((a, b) => new Date(b.date) - new Date(a.date));
        }
        
        // Generate random time
        function generateRandomTime(startHour, endHour) {
            const hour = startHour + Math.floor(Math.random() * (endHour - startHour));
            const minute = Math.floor(Math.random() * 60);
            return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
        }
        
        // Calculate working hours
        function calculateHours(timeIn, timeOut) {
            if (!timeIn || !timeOut) return 0;
            
            const [inHour, inMin] = timeIn.split(':').map(Number);
            const [outHour, outMin] = timeOut.split(':').map(Number);
            
            const inMinutes = inHour * 60 + inMin;
            const outMinutes = outHour * 60 + outMin;
            
            return Math.round((outMinutes - inMinutes) / 60 * 100) / 100;
        }
        
        // Display report
        function displayReport(data) {
            const container = document.getElementById('reportContainer');
            
            if (data.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 50px;">
                        <h3>📊 No Records Found</h3>
                        <p>No attendance records found for the selected criteria.</p>
                    </div>
                `;
                return;
            }
            
            // Calculate summary statistics
            const totalRecords = data.length;
            const presentCount = data.filter(record => record.status === 'Present').length;
            const absentCount = totalRecords - presentCount;
            const avgHours = data.reduce((sum, record) => sum + record.hours, 0) / presentCount;
            
            let html = `
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number">${totalRecords}</div>
                        <div class="stat-label">Total Records</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${presentCount}</div>
                        <div class="stat-label">Present Days</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${absentCount}</div>
                        <div class="stat-label">Absent Days</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${avgHours.toFixed(1)}h</div>
                        <div class="stat-label">Avg Hours/Day</div>
                    </div>
                </div>
                
                <table class="attendance-table">
                    <thead>
                        <tr>
                            <th>👤 Employee</th>
                            <th>🆔 ID</th>
                            <th>🏢 Department</th>
                            <th>📅 Date</th>
                            <th>🕐 Time In</th>
                            <th>🕕 Time Out</th>
                            <th>⏱️ Hours</th>
                            <th>📊 Status</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            data.forEach(record => {
                const statusClass = record.status === 'Present' ? 'status-present' : 'status-absent';
                const formattedDate = new Date(record.date).toLocaleDateString();
                
                html += `
                    <tr>
                        <td><strong>${record.name}</strong></td>
                        <td>${record.employee_id}</td>
                        <td>${record.department}</td>
                        <td>${formattedDate}</td>
                        <td>${record.time_in || '-'}</td>
                        <td>${record.time_out || '-'}</td>
                        <td>${record.hours > 0 ? record.hours + 'h' : '-'}</td>
                        <td><span class="${statusClass}">${record.status}</span></td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
            attendanceData = data; // Store for export
        }
        
        // Export report to CSV
        function exportReport() {
            if (attendanceData.length === 0) {
                showNotification('No data to export!', 'error');
                return;
            }
            
            let csv = 'Employee,Employee ID,Department,Date,Time In,Time Out,Hours,Status\n';
            
            attendanceData.forEach(record => {
                csv += `"${record.name}","${record.employee_id}","${record.department}","${record.date}","${record.time_in || ''}","${record.time_out || ''}","${record.hours}","${record.status}"\n`;
            });
            
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `attendance_report_${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
            showNotification('Report exported successfully!', 'success');
        }
        
        // Notification system
        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type === 'error' ? 'error' : ''} show`;
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 4000);
        }
        
        // Clean up camera on page unload
        window.onbeforeunload = function() {
            if (currentStream) {
                currentStream.getTracks().forEach(track => track.stop());
            }
        };
        
        // Handle visibility change to pause/resume camera
        document.addEventListener('visibilitychange', function() {
            if (document.hidden && currentStream) {
                // Page is hidden, pause camera
                currentStream.getTracks().forEach(track => track.enabled = false);
            } else if (!document.hidden && currentStream) {
                // Page is visible, resume camera
                currentStream.getTracks().forEach(track => track.enabled = true);
            }
        });
        
        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case '1':
                        e.preventDefault();
                        showTab('attendance');
                        break;
                    case '2':
                        e.preventDefault();
                        showTab('register');
                        break;
                    case '3':
                        e.preventDefault();
                        showTab('reports');
                        break;
                    case '4':
                        e.preventDefault();
                        showTab('employees');
                        break;
                    case '5':
                        e.preventDefault();
                        showTab('dashboard');
                        break;
                }
            }
            
            // Space bar to capture in attendance mode
            if (e.code === 'Space' && document.getElementById('attendance').classList.contains('active')) {
                e.preventDefault();
                captureForAttendance();
            }
        });
        
        // Auto-refresh dashboard data every 30 seconds
        setInterval(() => {
            if (document.getElementById('dashboard').classList.contains('active')) {
                loadDashboardData();
            }
        }, 30000);
        
        // Performance monitoring
        let performanceMetrics = {
            recognitionTime: [],
            cameraStartTime: null
        };
        
        function logPerformance(metric, value) {
            performanceMetrics[metric].push({
                value: value,
                timestamp: Date.now()
            });
            
            // Keep only last 100 measurements
            if (performanceMetrics[metric].length > 100) {
                performanceMetrics[metric].shift();
            }
        }
        
        // Initialize tooltips and help text
        function initializeHelp() {
            const helpTexts = {
                'empName': 'Enter the full name of the employee as it appears on official documents',
                'empId': 'Use a unique identifier like employee number or badge ID',
                'empDept': 'Select the department where the employee works',
                'empEmail': 'Work email address for notifications (optional)'
            };
            
            Object.keys(helpTexts).forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.title = helpTexts[id];
                }
            });
        }
        
        // Call initialization functions
        setTimeout(() => {
            initializeHelp();
        }, 1000);
    </script>
</body>
</html>
