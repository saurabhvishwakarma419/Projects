import React, { useState, useEffect } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from 'recharts';
import { Globe, TrendingUp, Users, AlertTriangle, Search, RefreshCw } from 'lucide-react';

const CovidTracker = () => {
  const [globalData, setGlobalData] = useState(null);
  const [countryData, setCountryData] = useState([]);
  const [selectedCountry, setSelectedCountry] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [lastUpdated, setLastUpdated] = useState(new Date());

  // Mock data - In a real app, you'd fetch from an API like disease.sh
  const mockGlobalData = {
    cases: 704178632,
    deaths: 7010681,
    recovered: 675040929,
    active: 22127022,
    critical: 42893,
    todayCases: 45123,
    todayDeaths: 832,
    todayRecovered: 38291
  };

  const mockCountryData = [
    { country: 'USA', cases: 103436829, deaths: 1127152, recovered: 101289910, active: 1019767, population: 334805269 },
    { country: 'India', cases: 44704982, deaths: 530779, recovered: 44165783, active: 8420, population: 1406631776 },
    { country: 'France', cases: 39019899, deaths: 174632, recovered: 38530135, active: 315132, population: 67499343 },
    { country: 'Germany', cases: 38437756, deaths: 174979, recovered: 37700000, active: 562777, population: 83883596 },
    { country: 'Brazil', cases: 37717062, deaths: 687240, recovered: 36711731, active: 318091, population: 216422446 },
    { country: 'Japan', cases: 33320438, deaths: 74694, recovered: 33199104, active: 46640, population: 123951692 },
    { country: 'South Korea', cases: 31364257, deaths: 34571, recovered: 30799928, active: 529758, population: 51329899 },
    { country: 'Italy', cases: 25870833, deaths: 190782, recovered: 24735602, active: 944449, population: 60262770 },
    { country: 'United Kingdom', cases: 24664297, deaths: 205843, recovered: 23988579, active: 469875, population: 67081000 },
    { country: 'Russia', cases: 23108065, deaths: 404134, recovered: 22477510, active: 226421, population: 143957079 }
  ];

  const mockTimelineData = [
    { date: '2024-01', cases: 680000000, deaths: 6800000 },
    { date: '2024-02', cases: 685000000, deaths: 6850000 },
    { date: '2024-03', cases: 690000000, deaths: 6900000 },
    { date: '2024-04', cases: 695000000, deaths: 6950000 },
    { date: '2024-05', cases: 700000000, deaths: 7000000 },
    { date: '2024-06', cases: 704000000, deaths: 7010000 }
  ];

  useEffect(() => {
    // Simulate API call
    const fetchData = async () => {
      setLoading(true);
      try {
        // Simulate network delay
        await new Promise(resolve => setTimeout(resolve, 1000));
        setGlobalData(mockGlobalData);
        setCountryData(mockCountryData);
        setLastUpdated(new Date());
      } catch (err) {
        setError('Failed to fetch data');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const formatNumber = (num) => {
    return new Intl.NumberFormat().format(num);
  };

  const filteredCountries = countryData.filter(country =>
    country.country.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getCountryStats = (country) => {
    if (!country) return null;
    const data = countryData.find(c => c.country === country);
    return data;
  };

  const refreshData = () => {
    setLastUpdated(new Date());
    // In a real app, you'd refetch the data here
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <RefreshCw className="w-12 h-12 text-blue-600 animate-spin mx-auto mb-4" />
          <p className="text-lg text-gray-600">Loading COVID-19 data...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 to-red-100 flex items-center justify-center">
        <div className="text-center">
          <AlertTriangle className="w-12 h-12 text-red-600 mx-auto mb-4" />
          <p className="text-lg text-red-600">{error}</p>
          <button 
            onClick={refreshData}
            className="mt-4 px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center mb-4">
            <Globe className="w-8 h-8 text-blue-600 mr-3" />
            <h1 className="text-4xl font-bold text-gray-800">COVID-19 Global Tracker</h1>
          </div>
          <p className="text-gray-600 mb-2">Real-time global COVID-19 statistics and trends</p>
          <p className="text-sm text-gray-500">
            Last updated: {lastUpdated.toLocaleString()}
            <button 
              onClick={refreshData}
              className="ml-2 text-blue-600 hover:text-blue-800"
            >
              <RefreshCw className="w-4 h-4 inline" />
            </button>
          </p>
        </div>

        {/* Global Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-blue-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Total Cases</p>
                <p className="text-2xl font-bold text-blue-600">{formatNumber(globalData.cases)}</p>
                <p className="text-sm text-green-600">+{formatNumber(globalData.todayCases)} today</p>
              </div>
              <Users className="w-8 h-8 text-blue-500" />
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-red-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Total Deaths</p>
                <p className="text-2xl font-bold text-red-600">{formatNumber(globalData.deaths)}</p>
                <p className="text-sm text-red-600">+{formatNumber(globalData.todayDeaths)} today</p>
              </div>
              <AlertTriangle className="w-8 h-8 text-red-500" />
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-green-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Recovered</p>
                <p className="text-2xl font-bold text-green-600">{formatNumber(globalData.recovered)}</p>
                <p className="text-sm text-green-600">+{formatNumber(globalData.todayRecovered)} today</p>
              </div>
              <TrendingUp className="w-8 h-8 text-green-500" />
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-yellow-500">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-500 text-sm">Active Cases</p>
                <p className="text-2xl font-bold text-yellow-600">{formatNumber(globalData.active)}</p>
                <p className="text-sm text-gray-500">{formatNumber(globalData.critical)} critical</p>
              </div>
              <Users className="w-8 h-8 text-yellow-500" />
            </div>
          </div>
        </div>

        {/* Charts Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Timeline Chart */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h3 className="text-xl font-semibold text-gray-800 mb-4">Global Trends (2024)</h3>
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={mockTimelineData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip formatter={(value) => formatNumber(value)} />
                <Legend />
                <Line 
                  type="monotone" 
                  dataKey="cases" 
                  stroke="#3b82f6" 
                  strokeWidth={2}
                  name="Total Cases"
                />
                <Line 
                  type="monotone" 
                  dataKey="deaths" 
                  stroke="#ef4444" 
                  strokeWidth={2}
                  name="Total Deaths"
                />
              </LineChart>
            </ResponsiveContainer>
          </div>

          {/* Top Countries Chart */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h3 className="text-xl font-semibold text-gray-800 mb-4">Top 10 Countries by Cases</h3>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={countryData.slice(0, 5)}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="country" />
                <YAxis />
                <Tooltip formatter={(value) => formatNumber(value)} />
                <Bar dataKey="cases" fill="#3b82f6" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Country Search and Details */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <h3 className="text-xl font-semibold text-gray-800 mb-4">Country Statistics</h3>
          
          {/* Search */}
          <div className="relative mb-6">
            <Search className="absolute left-3 top-3 w-5 h-5 text-gray-400" />
            <input
              type="text"
              placeholder="Search for a country..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* Country Selection */}
          <div className="mb-6">
            <select
              value={selectedCountry}
              onChange={(e) => setSelectedCountry(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Select a country</option>
              {filteredCountries.map((country) => (
                <option key={country.country} value={country.country}>
                  {country.country}
                </option>
              ))}
            </select>
          </div>

          {/* Selected Country Stats */}
          {selectedCountry && (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {(() => {
                const stats = getCountryStats(selectedCountry);
                if (!stats) return null;
                
                return (
                  <>
                    <div className="bg-blue-50 p-4 rounded-lg">
                      <p className="text-sm text-gray-600">Total Cases</p>
                      <p className="text-2xl font-bold text-blue-600">{formatNumber(stats.cases)}</p>
                      <p className="text-xs text-gray-500">
                        {((stats.cases / stats.population) * 100).toFixed(2)}% of population
                      </p>
                    </div>
                    <div className="bg-red-50 p-4 rounded-lg">
                      <p className="text-sm text-gray-600">Deaths</p>
                      <p className="text-2xl font-bold text-red-600">{formatNumber(stats.deaths)}</p>
                      <p className="text-xs text-gray-500">
                        {((stats.deaths / stats.cases) * 100).toFixed(2)}% case fatality rate
                      </p>
                    </div>
                    <div className="bg-green-50 p-4 rounded-lg">
                      <p className="text-sm text-gray-600">Recovered</p>
                      <p className="text-2xl font-bold text-green-600">{formatNumber(stats.recovered)}</p>
                      <p className="text-xs text-gray-500">
                        {((stats.recovered / stats.cases) * 100).toFixed(2)}% recovery rate
                      </p>
                    </div>
                  </>
                );
              })()}
            </div>
          )}
        </div>

        {/* Countries Table */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-xl font-semibold text-gray-800 mb-4">All Countries</h3>
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="border-b border-gray-200">
                  <th className="text-left py-3 px-4 font-semibold">Country</th>
                  <th className="text-right py-3 px-4 font-semibold">Cases</th>
                  <th className="text-right py-3 px-4 font-semibold">Deaths</th>
                  <th className="text-right py-3 px-4 font-semibold">Recovered</th>
                  <th className="text-right py-3 px-4 font-semibold">Active</th>
                </tr>
              </thead>
              <tbody>
                {filteredCountries.map((country, index) => (
                  <tr key={country.country} className={index % 2 === 0 ? 'bg-gray-50' : 'bg-white'}>
                    <td className="py-3 px-4 font-medium">{country.country}</td>
                    <td className="py-3 px-4 text-right text-blue-600">{formatNumber(country.cases)}</td>
                    <td className="py-3 px-4 text-right text-red-600">{formatNumber(country.deaths)}</td>
                    <td className="py-3 px-4 text-right text-green-600">{formatNumber(country.recovered)}</td>
                    <td className="py-3 px-4 text-right text-yellow-600">{formatNumber(country.active)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8 text-gray-500 text-sm">
          <p>Data is for demonstration purposes. In a production app, connect to APIs like disease.sh or WHO.</p>
        </div>
      </div>
    </div>
  );
};

export default CovidTracker;
