import React, { useState, useEffect } from 'react';
import { Heart, MessageCircle, Share, Send, User, Home, Users, Bell, Search, Plus } from 'lucide-react';

// Mock Firebase-like functions (since we can't use actual Firebase in this environment)
const mockAuth = {
  currentUser: null,
  signInWithEmailAndPassword: (email, password) => 
    Promise.resolve({ user: { uid: '1', email, displayName: email.split('@')[0] } }),
  createUserWithEmailAndPassword: (email, password) => 
    Promise.resolve({ user: { uid: '1', email, displayName: email.split('@')[0] } }),
  signOut: () => Promise.resolve()
};

const mockFirestore = {
  posts: [
    {
      id: '1',
      author: { name: 'John Doe', avatar: null, uid: '1' },
      content: 'Just launched my new project! Feeling excited about what\'s ahead ðŸš€',
      timestamp: Date.now() - 3600000,
      likes: 15,
      comments: [
        { id: '1', author: 'Alice Smith', content: 'Congratulations! That\'s awesome!', timestamp: Date.now() - 3000000 },
        { id: '2', author: 'Bob Johnson', content: 'Can\'t wait to see it!', timestamp: Date.now() - 2400000 }
      ],
      likedBy: []
    },
    {
      id: '2',
      author: { name: 'Sarah Wilson', avatar: null, uid: '2' },
      content: 'Beautiful sunset at the beach today! Sometimes you need to take a moment to appreciate the simple things in life.',
      timestamp: Date.now() - 7200000,
      likes: 28,
      comments: [],
      likedBy: []
    }
  ]
};

function FacebookClone() {
  const [user, setUser] = useState(null);
  const [posts, setPosts] = useState([]);
  const [newPost, setNewPost] = useState('');
  const [showAuth, setShowAuth] = useState(true);
  const [authMode, setAuthMode] = useState('login');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [commentInputs, setCommentInputs] = useState({});

  useEffect(() => {
    // Load mock data
    setPosts(mockFirestore.posts);
  }, []);

  const handleAuth = async () => {
    if (!email.trim() || !password.trim()) return;
    
    try {
      let result;
      if (authMode === 'login') {
        result = await mockAuth.signInWithEmailAndPassword(email, password);
      } else {
        result = await mockAuth.createUserWithEmailAndPassword(email, password);
      }
      setUser(result.user);
      setShowAuth(false);
      setEmail('');
      setPassword('');
    } catch (error) {
      console.error('Auth error:', error);
    }
  };

  const handleLogout = async () => {
    await mockAuth.signOut();
    setUser(null);
    setShowAuth(true);
  };

  const handleCreatePost = () => {
    if (!newPost.trim() || !user) return;
    
    const post = {
      id: Date.now().toString(),
      author: { 
        name: user.displayName || user.email.split('@')[0], 
        avatar: null, 
        uid: user.uid 
      },
      content: newPost,
      timestamp: Date.now(),
      likes: 0,
      comments: [],
      likedBy: []
    };
    
    setPosts(prev => [post, ...prev]);
    setNewPost('');
  };

  const handleLike = (postId) => {
    setPosts(prev => prev.map(post => {
      if (post.id === postId) {
        const isLiked = post.likedBy.includes(user.uid);
        return {
          ...post,
          likes: isLiked ? post.likes - 1 : post.likes + 1,
          likedBy: isLiked 
            ? post.likedBy.filter(uid => uid !== user.uid)
            : [...post.likedBy, user.uid]
        };
      }
      return post;
    }));
  };

  const handleComment = (postId) => {
    const commentText = commentInputs[postId];
    if (!commentText?.trim()) return;

    const comment = {
      id: Date.now().toString(),
      author: user.displayName || user.email.split('@')[0],
      content: commentText,
      timestamp: Date.now()
    };

    setPosts(prev => prev.map(post => {
      if (post.id === postId) {
        return {
          ...post,
          comments: [...post.comments, comment]
        };
      }
      return post;
    }));

    setCommentInputs(prev => ({ ...prev, [postId]: '' }));
  };

  const formatTime = (timestamp) => {
    const now = Date.now();
    const diff = now - timestamp;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    
    if (minutes < 1) return 'Just now';
    if (minutes < 60) return `${minutes}m ago`;
    if (hours < 24) return `${hours}h ago`;
    return `${days}d ago`;
  };

  if (showAuth) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md">
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-blue-600 mb-2">Facebook Clone</h1>
            <p className="text-gray-600">Connect with friends and share your moments</p>
          </div>
          
          <div className="space-y-4">
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <button
              onClick={handleAuth}
              className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition duration-200 font-medium"
            >
              {authMode === 'login' ? 'Log In' : 'Sign Up'}
            </button>
          </div>
          
          <div className="mt-6 text-center">
            <button
              onClick={() => setAuthMode(authMode === 'login' ? 'signup' : 'login')}
              className="text-blue-600 hover:underline"
            >
              {authMode === 'login' ? "Don't have an account? Sign up" : "Already have an account? Log in"}
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <header className="bg-white shadow-sm border-b sticky top-0 z-50">
        <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <h1 className="text-2xl font-bold text-blue-600">Facebook Clone</h1>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Search Facebook"
                className="pl-10 pr-4 py-2 bg-gray-100 rounded-full border-none focus:ring-2 focus:ring-blue-500 w-64"
              />
            </div>
          </div>
          
          <nav className="flex items-center space-x-6">
            <Home className="w-6 h-6 text-blue-600" />
            <Users className="w-6 h-6 text-gray-600 hover:text-blue-600 cursor-pointer" />
            <Bell className="w-6 h-6 text-gray-600 hover:text-blue-600 cursor-pointer" />
          </nav>
          
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
              <User className="w-5 h-5 text-white" />
            </div>
            <span className="font-medium text-gray-700">
              {user?.displayName || user?.email?.split('@')[0]}
            </span>
            <button
              onClick={handleLogout}
              className="text-sm bg-gray-200 hover:bg-gray-300 px-3 py-1 rounded-md transition"
            >
              Logout
            </button>
          </div>
        </div>
      </header>

      <div className="max-w-2xl mx-auto py-8 px-4">
        {/* Create Post */}
        <div className="bg-white rounded-lg shadow-md p-4 mb-6">
          <div className="flex space-x-3">
            <div className="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
              <User className="w-6 h-6 text-white" />
            </div>
            <div className="flex-1">
              <textarea
                placeholder="What's on your mind?"
                value={newPost}
                onChange={(e) => setNewPost(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                rows="3"
              />
              <div className="flex justify-between items-center mt-3">
                <div className="flex space-x-4 text-gray-500">
                  <button className="hover:text-blue-600 transition">ðŸ“· Photo</button>
                  <button className="hover:text-blue-600 transition">ðŸ˜Š Feeling</button>
                </div>
                <button
                  onClick={handleCreatePost}
                  disabled={!newPost.trim()}
                  className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition"
                >
                  Post
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Posts Feed */}
        <div className="space-y-6">
          {posts.map((post) => (
            <div key={post.id} className="bg-white rounded-lg shadow-md overflow-hidden">
              {/* Post Header */}
              <div className="p-4 flex items-center space-x-3">
                <div className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center">
                  <User className="w-6 h-6 text-gray-600" />
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold text-gray-900">{post.author.name}</h3>
                  <p className="text-sm text-gray-500">{formatTime(post.timestamp)}</p>
                </div>
              </div>

              {/* Post Content */}
              <div className="px-4 pb-3">
                <p className="text-gray-800 leading-relaxed">{post.content}</p>
              </div>

              {/* Post Stats */}
              <div className="px-4 py-2 border-t border-gray-100">
                <div className="flex justify-between items-center text-sm text-gray-500">
                  <span>{post.likes} likes</span>
                  <span>{post.comments.length} comments</span>
                </div>
              </div>

              {/* Post Actions */}
              <div className="px-4 py-2 border-t border-gray-100">
                <div className="flex justify-around">
                  <button
                    onClick={() => handleLike(post.id)}
                    className={`flex items-center space-x-2 px-4 py-2 rounded-lg hover:bg-gray-100 transition ${
                      post.likedBy.includes(user?.uid) ? 'text-blue-600' : 'text-gray-600'
                    }`}
                  >
                    <Heart className={`w-5 h-5 ${post.likedBy.includes(user?.uid) ? 'fill-current' : ''}`} />
                    <span>Like</span>
                  </button>
                  <button className="flex items-center space-x-2 px-4 py-2 rounded-lg hover:bg-gray-100 text-gray-600 transition">
                    <MessageCircle className="w-5 h-5" />
                    <span>Comment</span>
                  </button>
                  <button className="flex items-center space-x-2 px-4 py-2 rounded-lg hover:bg-gray-100 text-gray-600 transition">
                    <Share className="w-5 h-5" />
                    <span>Share</span>
                  </button>
                </div>
              </div>

              {/* Comments */}
              {post.comments.length > 0 && (
                <div className="px-4 py-2 border-t border-gray-100">
                  <div className="space-y-3">
                    {post.comments.map((comment) => (
                      <div key={comment.id} className="flex space-x-2">
                        <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center flex-shrink-0">
                          <User className="w-4 h-4 text-gray-600" />
                        </div>
                        <div className="flex-1">
                          <div className="bg-gray-100 rounded-lg px-3 py-2">
                            <p className="font-semibold text-sm text-gray-900">{comment.author}</p>
                            <p className="text-gray-800">{comment.content}</p>
                          </div>
                          <p className="text-xs text-gray-500 mt-1">{formatTime(comment.timestamp)}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Comment Input */}
              <div className="px-4 py-3 border-t border-gray-100">
                <div className="flex space-x-2">
                  <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0">
                    <User className="w-4 h-4 text-white" />
                  </div>
                  <div className="flex-1 flex">
                    <input
                      type="text"
                      placeholder="Write a comment..."
                      value={commentInputs[post.id] || ''}
                      onChange={(e) => setCommentInputs(prev => ({ ...prev, [post.id]: e.target.value }))}
                      className="flex-1 bg-gray-100 rounded-full px-4 py-2 border-none focus:ring-2 focus:ring-blue-500"
                      onKeyPress={(e) => e.key === 'Enter' && handleComment(post.id)}
                    />
                    <button
                      onClick={() => handleComment(post.id)}
                      className="ml-2 text-blue-600 hover:text-blue-700"
                    >
                      <Send className="w-5 h-5" />
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default FacebookClone;
