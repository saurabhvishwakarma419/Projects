<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Credit Card Fraud Detection System</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tensorflow/4.2.0/tf.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 30px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: pulse 4s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 0.5; }
            50% { transform: scale(1.1); opacity: 0.8; }
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            z-index: 1;
            position: relative;
        }

        .header p {
            font-size: 1.1em;
            opacity: 0.9;
            z-index: 1;
            position: relative;
        }

        .tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 3px solid #e9ecef;
        }

        .tab {
            flex: 1;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            font-weight: 600;
            color: #666;
            border-bottom: 3px solid transparent;
            transition: all 0.3s ease;
            position: relative;
        }

        .tab:hover {
            background: rgba(102, 126, 234, 0.1);
            color: #667eea;
        }

        .tab.active {
            color: #667eea;
            border-bottom-color: #667eea;
            background: white;
        }

        .tab-content {
            display: none;
            padding: 40px;
            animation: fadeIn 0.5s ease-in-out;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-group {
            margin-bottom: 25px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
            font-size: 14px;
        }

        input, select, textarea {
            width: 100%;
            padding: 15px;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: white;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 12px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn-danger {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
        }

        .btn-danger:hover {
            box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-top: 30px;
        }

        .card {
            background: white;
            border-radius: 16px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid #f1f3f4;
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }

        .card h3 {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.3em;
            border-bottom: 2px solid #f1f3f4;
            padding-bottom: 10px;
        }

        .result {
            margin-top: 30px;
            padding: 25px;
            border-radius: 16px;
            font-size: 18px;
            font-weight: 600;
            text-align: center;
            animation: slideIn 0.5s ease-out;
        }

        @keyframes slideIn {
            from { opacity: 0; transform: scale(0.9); }
            to { opacity: 1; transform: scale(1); }
        }

        .result.fraud {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            box-shadow: 0 10px 30px rgba(255, 107, 107, 0.3);
        }

        .result.legitimate {
            background: linear-gradient(135deg, #51cf66, #40c057);
            color: white;
            box-shadow: 0 10px 30px rgba(81, 207, 102, 0.3);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 25px;
            border-radius: 16px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        }

        .stat-value {
            font-size: 2.5em;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9em;
            opacity: 0.9;
        }

        .chart-container {
            position: relative;
            height: 400px;
            margin: 20px 0;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 40px;
            color: #667eea;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .feature-importance {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 12px;
            margin-top: 20px;
        }

        .feature-bar {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .feature-name {
            width: 120px;
            font-size: 14px;
            font-weight: 600;
        }

        .feature-value {
            flex: 1;
            height: 25px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 12px;
            margin: 0 10px;
            transition: all 0.3s ease;
        }

        .feature-score {
            font-size: 14px;
            font-weight: 600;
            color: #667eea;
        }

        .alert {
            padding: 20px;
            border-radius: 12px;
            margin: 20px 0;
            border-left: 5px solid;
        }

        .alert-info {
            background: #e3f2fd;
            border-color: #2196f3;
            color: #0d47a1;
        }

        .alert-success {
            background: #e8f5e8;
            border-color: #4caf50;
            color: #2e7d32;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üõ°Ô∏è Fraud Detection System</h1>
            <p>Advanced Machine Learning for Credit Card Security</p>
        </div>

        <div class="tabs">
            <div class="tab active" onclick="switchTab('detect')">üîç Detection</div>
            <div class="tab" onclick="switchTab('dashboard')">üìä Dashboard</div>
            <div class="tab" onclick="switchTab('train')">ü§ñ Training</div>
            <div class="tab" onclick="switchTab('analytics')">üìà Analytics</div>
        </div>

        <!-- Detection Tab -->
        <div class="tab-content active" id="detect">
            <div class="card">
                <h3>üîç Real-Time Fraud Detection</h3>
                <div class="alert alert-info">
                    Enter transaction details below to check for potential fraud using our ML model.
                </div>
                
                <div class="grid">
                    <div>
                        <div class="form-group">
                            <label>Transaction Amount ($)</label>
                            <input type="number" id="amount" step="0.01" placeholder="Enter amount">
                        </div>
                        <div class="form-group">
                            <label>Merchant Category</label>
                            <select id="category">
                                <option value="grocery">Grocery</option>
                                <option value="gas">Gas Station</option>
                                <option value="restaurant">Restaurant</option>
                                <option value="online">Online Purchase</option>
                                <option value="retail">Retail</option>
                                <option value="entertainment">Entertainment</option>
                                <option value="travel">Travel</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Transaction Time</label>
                            <input type="time" id="time" value="12:00">
                        </div>
                    </div>
                    <div>
                        <div class="form-group">
                            <label>Distance from Home (miles)</label>
                            <input type="number" id="distance" placeholder="0-1000" min="0" max="1000">
                        </div>
                        <div class="form-group">
                            <label>Transactions Today</label>
                            <input type="number" id="txn_count" placeholder="Number of transactions" min="0" max="50">
                        </div>
                        <div class="form-group">
                            <label>Days Since Last Transaction</label>
                            <input type="number" id="days_since" placeholder="0-30" min="0" max="30">
                        </div>
                    </div>
                </div>
                
                <button class="btn" onclick="predictFraud()">üîç Analyze Transaction</button>
                
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Analyzing transaction patterns...</p>
                </div>
                
                <div id="prediction-result"></div>
                
                <div id="feature-analysis" style="display: none;">
                    <div class="feature-importance">
                        <h4>Feature Analysis</h4>
                        <div id="features"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Dashboard Tab -->
        <div class="tab-content" id="dashboard">
            <h3>üìä System Dashboard</h3>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value" id="total-transactions">1,247</div>
                    <div class="stat-label">Total Transactions</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="fraud-detected">23</div>
                    <div class="stat-label">Fraud Detected</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="accuracy">98.2%</div>
                    <div class="stat-label">Model Accuracy</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="savings">$45.2K</div>
                    <div class="stat-label">Money Saved</div>
                </div>
            </div>

            <div class="grid">
                <div class="card">
                    <h3>Fraud Detection Over Time</h3>
                    <div class="chart-container">
                        <canvas id="timeChart"></canvas>
                    </div>
                </div>
                <div class="card">
                    <h3>Transaction Categories</h3>
                    <div class="chart-container">
                        <canvas id="categoryChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Training Tab -->
        <div class="tab-content" id="train">
            <div class="card">
                <h3>ü§ñ Model Training</h3>
                <div class="alert alert-info">
                    Train and evaluate machine learning models for fraud detection.
                </div>
                
                <div class="form-group">
                    <label>Model Type</label>
                    <select id="model-type">
                        <option value="neural">Neural Network</option>
                        <option value="random-forest">Random Forest</option>
                        <option value="svm">Support Vector Machine</option>
                        <option value="logistic">Logistic Regression</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label>Training Parameters</label>
                    <div class="grid">
                        <div>
                            <label>Learning Rate</label>
                            <input type="number" id="learning-rate" value="0.001" step="0.0001">
                        </div>
                        <div>
                            <label>Epochs</label>
                            <input type="number" id="epochs" value="100" min="10" max="1000">
                        </div>
                    </div>
                </div>
                
                <button class="btn" onclick="trainModel()">üöÄ Start Training</button>
                <button class="btn btn-danger" onclick="generateData()">üìä Generate Sample Data</button>
                
                <div class="loading" id="training-loading">
                    <div class="spinner"></div>
                    <p>Training model... This may take a few minutes.</p>
                </div>
                
                <div id="training-results" style="display: none;">
                    <div class="card">
                        <h3>Training Results</h3>
                        <div class="chart-container">
                            <canvas id="trainingChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Analytics Tab -->
        <div class="tab-content" id="analytics">
            <h3>üìà Advanced Analytics</h3>
            
            <div class="grid">
                <div class="card">
                    <h3>Risk Distribution</h3>
                    <div class="chart-container">
                        <canvas id="riskChart"></canvas>
                    </div>
                </div>
                <div class="card">
                    <h3>Model Performance</h3>
                    <div class="chart-container">
                        <canvas id="performanceChart"></canvas>
                    </div>
                </div>
            </div>

            <div class="card">
                <h3>Recent Transactions</h3>
                <div id="recent-transactions">
                    <div style="overflow-x: auto;">
                        <table style="width: 100%; border-collapse: collapse; margin-top: 20px;">
                            <thead style="background: #f8f9fa;">
                                <tr>
                                    <th style="padding: 15px; text-align: left; border-bottom: 2px solid #e9ecef;">Time</th>
                                    <th style="padding: 15px; text-align: left; border-bottom: 2px solid #e9ecef;">Amount</th>
                                    <th style="padding: 15px; text-align: left; border-bottom: 2px solid #e9ecef;">Category</th>
                                    <th style="padding: 15px; text-align: left; border-bottom: 2px solid #e9ecef;">Risk Score</th>
                                    <th style="padding: 15px; text-align: left; border-bottom: 2px solid #e9ecef;">Status</th>
                                </tr>
                            </thead>
                            <tbody id="transaction-table"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let model = null;
        let trainingData = [];
        let transactionHistory = [];

        // Tab switching
        function switchTab(tabName) {
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            event.target.classList.add('active');
            document.getElementById(tabName).classList.add('active');
            
            if (tabName === 'dashboard') {
                setTimeout(initializeDashboard, 100);
            } else if (tabName === 'analytics') {
                setTimeout(initializeAnalytics, 100);
            }
        }

        // Generate synthetic training data
        function generateData() {
            document.getElementById('training-loading').classList.add('show');
            
            setTimeout(() => {
                trainingData = [];
                for (let i = 0; i < 1000; i++) {
                    const isFraud = Math.random() < 0.05; // 5% fraud rate
                    const amount = isFraud ? 
                        Math.random() * 5000 + 1000 : // Fraud: higher amounts
                        Math.random() * 500 + 10;     // Normal: lower amounts
                    
                    const hour = isFraud ?
                        Math.random() < 0.7 ? Math.floor(Math.random() * 6) + 22 : Math.floor(Math.random() * 24) : // Fraud: late night bias
                        Math.floor(Math.random() * 16) + 6; // Normal: daytime
                    
                    const distance = isFraud ?
                        Math.random() * 1000 + 100 : // Fraud: farther distances
                        Math.random() * 50;          // Normal: close to home
                    
                    const txnCount = isFraud ?
                        Math.floor(Math.random() * 10) + 5 : // Fraud: more transactions
                        Math.floor(Math.random() * 5) + 1;   // Normal: fewer transactions
                    
                    trainingData.push({
                        features: [
                            amount / 1000,           // Normalized amount
                            hour / 24,               // Normalized hour
                            distance / 1000,         // Normalized distance
                            txnCount / 20,          // Normalized transaction count
                            Math.random(),          // Random merchant category
                            Math.random() * 30      // Days since last transaction
                        ],
                        label: isFraud ? 1 : 0
                    });
                }
                
                document.getElementById('training-loading').classList.remove('show');
                alert(`Generated ${trainingData.length} training samples (${trainingData.filter(d => d.label === 1).length} fraud, ${trainingData.filter(d => d.label === 0).length} legitimate)`);
            }, 1500);
        }

        // Train the model
        async function trainModel() {
            if (trainingData.length === 0) {
                alert('Please generate training data first!');
                return;
            }

            document.getElementById('training-loading').classList.add('show');
            
            // Prepare data for TensorFlow
            const xs = tf.tensor2d(trainingData.map(d => d.features));
            const ys = tf.tensor2d(trainingData.map(d => [d.label]));
            
            // Create a simple neural network
            model = tf.sequential({
                layers: [
                    tf.layers.dense({ inputShape: [6], units: 16, activation: 'relu' }),
                    tf.layers.dropout({ rate: 0.3 }),
                    tf.layers.dense({ units: 8, activation: 'relu' }),
                    tf.layers.dropout({ rate: 0.3 }),
                    tf.layers.dense({ units: 1, activation: 'sigmoid' })
                ]
            });

            model.compile({
                optimizer: tf.train.adam(parseFloat(document.getElementById('learning-rate').value)),
                loss: 'binaryCrossentropy',
                metrics: ['accuracy']
            });

            const epochs = parseInt(document.getElementById('epochs').value);
            const history = await model.fit(xs, ys, {
                epochs: epochs,
                batchSize: 32,
                validationSplit: 0.2,
                callbacks: {
                    onEpochEnd: (epoch, logs) => {
                        console.log(`Epoch ${epoch + 1}: loss = ${logs.loss.toFixed(4)}, accuracy = ${logs.acc.toFixed(4)}`);
                    }
                }
            });

            document.getElementById('training-loading').classList.remove('show');
            document.getElementById('training-results').style.display = 'block';
            
            // Show training results
            showTrainingResults(history);
            
            alert('Model training completed!');
        }

        // Predict fraud for a transaction
        async function predictFraud() {
            if (!model) {
                alert('Please train a model first!');
                return;
            }

            document.getElementById('loading').classList.add('show');
            
            setTimeout(async () => {
                const amount = parseFloat(document.getElementById('amount').value) || 0;
                const category = document.getElementById('category').value;
                const time = document.getElementById('time').value;
                const distance = parseFloat(document.getElementById('distance').value) || 0;
                const txnCount = parseInt(document.getElementById('txn_count').value) || 1;
                const daysSince = parseInt(document.getElementById('days_since').value) || 0;
                
                // Convert time to hour
                const hour = parseInt(time.split(':')[0]);
                
                // Convert category to numeric
                const categoryMap = { grocery: 0.1, gas: 0.2, restaurant: 0.3, online: 0.4, retail: 0.5, entertainment: 0.6, travel: 0.7, other: 0.8 };
                const categoryNum = categoryMap[category] || 0.8;
                
                // Prepare features (same normalization as training)
                const features = [
                    amount / 1000,
                    hour / 24,
                    distance / 1000,
                    txnCount / 20,
                    categoryNum,
                    daysSince / 30
                ];
                
                // Make prediction
                const prediction = model.predict(tf.tensor2d([features]));
                const probability = await prediction.data();
                const fraudProb = probability[0];
                
                document.getElementById('loading').classList.remove('show');
                
                // Display result
                const resultDiv = document.getElementById('prediction-result');
                const isFraud = fraudProb > 0.5;
                
                resultDiv.innerHTML = `
                    <div class="result ${isFraud ? 'fraud' : 'legitimate'}">
                        <h3>${isFraud ? 'üö® POTENTIAL FRAUD DETECTED' : '‚úÖ TRANSACTION APPEARS LEGITIMATE'}</h3>
                        <p>Risk Score: ${(fraudProb * 100).toFixed(1)}%</p>
                        <p>${isFraud ? 'This transaction shows suspicious patterns and requires review.' : 'This transaction appears normal based on historical patterns.'}</p>
                    </div>
                `;
                
                // Show feature analysis
                showFeatureAnalysis(features, fraudProb);
                
                // Add to transaction history
                addToTransactionHistory({
                    time: new Date().toLocaleTimeString(),
                    amount: amount,
                    category: category,
                    riskScore: fraudProb,
                    status: isFraud ? 'Flagged' : 'Approved'
                });
                
            }, 2000);
        }

        // Show feature importance analysis
        function showFeatureAnalysis(features, prediction) {
            const featureNames = ['Amount', 'Time', 'Distance', 'Frequency', 'Category', 'Recency'];
            const analysisDiv = document.getElementById('feature-analysis');
            const featuresDiv = document.getElementById('features');
            
            let html = '';
            features.forEach((value, i) => {
                const importance = value * prediction * 100;
                html += `
                    <div class="feature-bar">
                        <div class="feature-name">${featureNames[i]}</div>
                        <div class="feature-value" style="width: ${Math.max(importance, 5)}%"></div>
                        <div class="feature-score">${importance.toFixed(1)}%</div>
                    </div>
                `;
            });
            
            featuresDiv.innerHTML = html;
            analysisDiv.style.display = 'block';
        }

        // Add transaction to history
        function addToTransactionHistory(transaction) {
            transactionHistory.unshift(transaction);
            if (transactionHistory.length > 20) {
                transactionHistory = transactionHistory.slice(0, 20);
            }
            updateTransactionTable();
        }

        // Update transaction table
        function updateTransactionTable() {
            const tableBody = document.getElementById('transaction-table');
            let html = '';
            
            transactionHistory.forEach(txn => {
                const statusColor = txn.status === 'Flagged' ? '#ff6b6b' : '#51cf66';
                html += `
                    <tr style="border-bottom: 1px solid #f1f3f4;">
                        <td style="padding: 15px;">${txn.time}</td>
                        <td style="padding: 15px;">$${txn.amount.toFixed(2)}</td>
                        <td style="padding: 15px; text-transform: capitalize;">${txn.category}</td>
                        <td style="padding: 15px;">${(txn.riskScore * 100).toFixed(1)}%</td>
                        <td style="padding: 15px; color: ${statusColor}; font-weight: 600;">${txn.status}</td>
                    </tr>
                `;
            });
            
            tableBody.innerHTML = html;
        }

        // Show training results
        function showTrainingResults(history) {
            const ctx = document.getElementById('trainingChart').getContext('2d');
            const lossData = history.history.loss;
            const accData = history.history.acc;
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: lossData.map((_, i) => i + 1),
                    datasets: [{
                        label: 'Training Loss',
                        data: lossData,
                        borderColor: '#ff6b6b',
                        backgroundColor: 'rgba(255, 107, 107, 0.1)',
                        yAxisID: 'y'
                    }, {
                        label: 'Training Accuracy',
                        data: accData,
                        borderColor: '#51cf66',
                        backgroundColor: 'rgba(81, 207, 102, 0.1)',
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: '
