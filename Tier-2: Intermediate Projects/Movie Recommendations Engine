import React, { useState, useEffect } from 'react';
import { Star, ThumbsUp, ThumbsDown, Play, Info, Filter } from 'lucide-react';

const MovieRecommendationSystem = () => {
  // Sample movie database with features for ML
  const [movies] = useState([
    {
      id: 1,
      title: "The Matrix",
      genre: ["Action", "Sci-Fi"],
      year: 1999,
      rating: 8.7,
      director: "Wachowski Sisters",
      actors: ["Keanu Reeves", "Laurence Fishburne"],
      plot: "A hacker discovers reality is a simulation",
      features: [0.9, 0.8, 0.1, 0.9, 0.7], // [action, sci-fi, romance, thriller, drama]
      poster: "ðŸŽ­"
    },
    {
      id: 2,
      title: "Titanic",
      genre: ["Romance", "Drama"],
      year: 1997,
      rating: 7.8,
      director: "James Cameron",
      actors: ["Leonardo DiCaprio", "Kate Winslet"],
      plot: "A love story aboard the doomed ship",
      features: [0.2, 0.1, 0.9, 0.3, 0.8],
      poster: "ðŸš¢"
    },
    {
      id: 3,
      title: "Inception",
      genre: ["Sci-Fi", "Thriller"],
      year: 2010,
      rating: 8.8,
      director: "Christopher Nolan",
      actors: ["Leonardo DiCaprio", "Marion Cotillard"],
      plot: "Dreams within dreams in a mind-bending heist",
      features: [0.6, 0.9, 0.2, 0.9, 0.5],
      poster: "ðŸ§ "
    },
    {
      id: 4,
      title: "The Godfather",
      genre: ["Crime", "Drama"],
      year: 1972,
      rating: 9.2,
      director: "Francis Ford Coppola",
      actors: ["Marlon Brando", "Al Pacino"],
      plot: "The aging patriarch transfers control of his empire",
      features: [0.4, 0.1, 0.1, 0.6, 0.9],
      poster: "ðŸ‘‘"
    },
    {
      id: 5,
      title: "Pulp Fiction",
      genre: ["Crime", "Drama"],
      year: 1994,
      rating: 8.9,
      director: "Quentin Tarantino",
      actors: ["John Travolta", "Samuel L. Jackson"],
      plot: "Interconnected criminal stories in Los Angeles",
      features: [0.7, 0.2, 0.1, 0.8, 0.7],
      poster: "ðŸ”«"
    },
    {
      id: 6,
      title: "The Notebook",
      genre: ["Romance", "Drama"],
      year: 2004,
      rating: 7.8,
      director: "Nick Cassavetes",
      actors: ["Ryan Gosling", "Rachel McAdams"],
      plot: "A love story that spans decades",
      features: [0.1, 0.1, 0.9, 0.2, 0.8],
      poster: "ðŸ’•"
    },
    {
      id: 7,
      title: "Mad Max: Fury Road",
      genre: ["Action", "Thriller"],
      year: 2015,
      rating: 8.1,
      director: "George Miller",
      actors: ["Tom Hardy", "Charlize Theron"],
      plot: "Post-apocalyptic chase across the wasteland",
      features: [0.9, 0.3, 0.1, 0.8, 0.3],
      poster: "ðŸš—"
    },
    {
      id: 8,
      title: "Her",
      genre: ["Romance", "Sci-Fi", "Drama"],
      year: 2013,
      rating: 8.0,
      director: "Spike Jonze",
      actors: ["Joaquin Phoenix", "Scarlett Johansson"],
      plot: "A man falls in love with an AI operating system",
      features: [0.1, 0.7, 0.8, 0.3, 0.9],
      poster: "ðŸ¤–"
    }
  ]);

  const [userRatings, setUserRatings] = useState({});
  const [recommendations, setRecommendations] = useState([]);
  const [userProfile, setUserProfile] = useState([0, 0, 0, 0, 0]);
  const [selectedGenre, setSelectedGenre] = useState('All');
  const [recommendationMethod, setRecommendationMethod] = useState('content');

  // Content-based filtering using cosine similarity
  const cosineSimilarity = (vecA, vecB) => {
    const dotProduct = vecA.reduce((sum, a, i) => sum + a * vecB[i], 0);
    const magnitudeA = Math.sqrt(vecA.reduce((sum, a) => sum + a * a, 0));
    const magnitudeB = Math.sqrt(vecB.reduce((sum, b) => sum + b * b, 0));
    return dotProduct / (magnitudeA * magnitudeB);
  };

  // Update user profile based on ratings
  const updateUserProfile = () => {
    const ratedMovies = Object.keys(userRatings);
    if (ratedMovies.length === 0) return;

    const profileSum = [0, 0, 0, 0, 0];
    let totalWeight = 0;

    ratedMovies.forEach(movieId => {
      const movie = movies.find(m => m.id === parseInt(movieId));
      const rating = userRatings[movieId];
      const weight = rating > 0 ? rating / 5 : 0; // Normalize to 0-1
      
      movie.features.forEach((feature, i) => {
        profileSum[i] += feature * weight;
      });
      totalWeight += weight;
    });

    if (totalWeight > 0) {
      const newProfile = profileSum.map(sum => sum / totalWeight);
      setUserProfile(newProfile);
    }
  };

  // Content-based recommendations
  const getContentBasedRecommendations = () => {
    if (userProfile.every(val => val === 0)) return [];

    const unratedMovies = movies.filter(movie => !userRatings[movie.id]);
    
    const moviesWithSimilarity = unratedMovies.map(movie => ({
      ...movie,
      similarity: cosineSimilarity(userProfile, movie.features)
    }));

    return moviesWithSimilarity
      .sort((a, b) => b.similarity - a.similarity)
      .slice(0, 4);
  };

  // Collaborative filtering simulation (simplified)
  const getCollaborativeRecommendations = () => {
    const ratedMovieIds = Object.keys(userRatings).map(id => parseInt(id));
    if (ratedMovieIds.length === 0) return [];

    // Simulate finding similar users based on common highly rated movies
    const unratedMovies = movies.filter(movie => !userRatings[movie.id]);
    
    // Simple approach: recommend highly rated movies from similar genres
    const likedGenres = ratedMovieIds
      .filter(id => userRatings[id] >= 4)
      .flatMap(id => movies.find(m => m.id === id)?.genre || []);

    const genreCount = likedGenres.reduce((acc, genre) => {
      acc[genre] = (acc[genre] || 0) + 1;
      return acc;
    }, {});

    return unratedMovies
      .map(movie => ({
        ...movie,
        relevanceScore: movie.genre.reduce((score, genre) => 
          score + (genreCount[genre] || 0), 0) + movie.rating / 10
      }))
      .sort((a, b) => b.relevanceScore - a.relevanceScore)
      .slice(0, 4);
  };

  // Hybrid recommendations
  const getHybridRecommendations = () => {
    const contentRecs = getContentBasedRecommendations();
    const collabRecs = getCollaborativeRecommendations();
    
    // Combine and deduplicate
    const combined = [...contentRecs, ...collabRecs];
    const unique = combined.filter((movie, index, self) => 
      index === self.findIndex(m => m.id === movie.id)
    );
    
    return unique.slice(0, 4);
  };

  // Generate recommendations based on selected method
  useEffect(() => {
    updateUserProfile();
    
    let recs = [];
    switch (recommendationMethod) {
      case 'content':
        recs = getContentBasedRecommendations();
        break;
      case 'collaborative':
        recs = getCollaborativeRecommendations();
        break;
      case 'hybrid':
        recs = getHybridRecommendations();
        break;
    }
    
    setRecommendations(recs);
  }, [userRatings, recommendationMethod]);

  const handleRating = (movieId, rating) => {
    setUserRatings(prev => ({
      ...prev,
      [movieId]: rating
    }));
  };

  const filteredMovies = selectedGenre === 'All' 
    ? movies 
    : movies.filter(movie => movie.genre.includes(selectedGenre));

  const allGenres = ['All', ...new Set(movies.flatMap(movie => movie.genre))];

  const MovieCard = ({ movie, showSimilarity = false }) => (
    <div className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow">
      <div className="text-center mb-4">
        <div className="text-6xl mb-2">{movie.poster}</div>
        <h3 className="font-bold text-lg mb-1">{movie.title}</h3>
        <p className="text-gray-600 text-sm">{movie.year} â€¢ {movie.genre.join(', ')}</p>
      </div>
      
      <div className="mb-4">
        <div className="flex items-center justify-between mb-2">
          <span className="flex items-center">
            <Star className="w-4 h-4 text-yellow-500 mr-1" />
            {movie.rating}
          </span>
          {showSimilarity && movie.similarity && (
            <span className="text-sm text-blue-600">
              {Math.round(movie.similarity * 100)}% match
            </span>
          )}
        </div>
        <p className="text-gray-700 text-sm mb-3">{movie.plot}</p>
        <p className="text-gray-600 text-xs">
          Directed by {movie.director}
        </p>
      </div>

      <div className="flex justify-between items-center">
        <div className="flex space-x-1">
          {[1, 2, 3, 4, 5].map(star => (
            <button
              key={star}
              onClick={() => handleRating(movie.id, star)}
              className={`w-6 h-6 ${
                userRatings[movie.id] >= star 
                  ? 'text-yellow-500' 
                  : 'text-gray-300'
              } hover:text-yellow-400`}
            >
              <Star className="w-full h-full fill-current" />
            </button>
          ))}
        </div>
        <div className="flex space-x-2">
          <button className="p-2 text-blue-600 hover:bg-blue-50 rounded">
            <Play className="w-4 h-4" />
          </button>
          <button className="p-2 text-gray-600 hover:bg-gray-50 rounded">
            <Info className="w-4 h-4" />
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-7xl mx-auto">
        <header className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">
            ðŸŽ¬ ML Movie Recommender
          </h1>
          <p className="text-gray-600">
            Rate movies to get personalized recommendations using machine learning
          </p>
        </header>

        {/* Controls */}
        <div className="bg-white rounded-lg shadow p-6 mb-8">
          <div className="flex flex-wrap gap-4 items-center justify-between">
            <div className="flex items-center space-x-4">
              <Filter className="w-5 h-5 text-gray-600" />
              <select 
                value={selectedGenre}
                onChange={(e) => setSelectedGenre(e.target.value)}
                className="px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                {allGenres.map(genre => (
                  <option key={genre} value={genre}>{genre}</option>
                ))}
              </select>
            </div>
            
            <div className="flex items-center space-x-4">
              <span className="text-sm font-medium text-gray-700">Algorithm:</span>
              <div className="flex space-x-2">
                {[
                  { key: 'content', label: 'Content-Based' },
                  { key: 'collaborative', label: 'Collaborative' },
                  { key: 'hybrid', label: 'Hybrid' }
                ].map(method => (
                  <button
                    key={method.key}
                    onClick={() => setRecommendationMethod(method.key)}
                    className={`px-3 py-1 rounded-full text-sm ${
                      recommendationMethod === method.key
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    {method.label}
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* User Profile Visualization */}
          {userProfile.some(val => val > 0) && (
            <div className="mt-4 p-4 bg-blue-50 rounded-lg">
              <h3 className="font-medium text-blue-800 mb-2">Your Taste Profile:</h3>
              <div className="grid grid-cols-5 gap-2">
                {['Action', 'Sci-Fi', 'Romance', 'Thriller', 'Drama'].map((genre, i) => (
                  <div key={genre} className="text-center">
                    <div className="text-xs text-blue-600 mb-1">{genre}</div>
                    <div className="w-full bg-blue-200 rounded-full h-2">
                      <div 
                        className="bg-blue-600 h-2 rounded-full" 
                        style={{width: `${userProfile[i] * 100}%`}}
                      ></div>
                    </div>
                    <div className="text-xs text-blue-800 mt-1">
                      {Math.round(userProfile[i] * 100)}%
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Recommendations Section */}
        {recommendations.length > 0 && (
          <section className="mb-12">
            <h2 className="text-2xl font-bold text-gray-800 mb-6">
              Recommendations for You
              <span className="text-lg font-normal text-gray-600 ml-2">
                ({recommendationMethod.charAt(0).toUpperCase() + recommendationMethod.slice(1)} Filtering)
              </span>
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {recommendations.map(movie => (
                <MovieCard key={movie.id} movie={movie} showSimilarity={true} />
              ))}
            </div>
          </section>
        )}

        {/* All Movies Section */}
        <section>
          <h2 className="text-2xl font-bold text-gray-800 mb-6">
            All Movies {selectedGenre !== 'All' && `(${selectedGenre})`}
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {filteredMovies.map(movie => (
              <MovieCard key={movie.id} movie={movie} />
            ))}
          </div>
        </section>

        {/* Algorithm Explanation */}
        <div className="mt-12 bg-white rounded-lg shadow p-6">
          <h3 className="text-xl font-bold text-gray-800 mb-4">How It Works</h3>
          <div className="grid md:grid-cols-3 gap-6">
            <div>
              <h4 className="font-semibold text-blue-600 mb-2">Content-Based Filtering</h4>
              <p className="text-sm text-gray-600">
                Analyzes movie features (genre, style) and recommends similar movies to ones you've rated highly using cosine similarity.
              </p>
            </div>
            <div>
              <h4 className="font-semibold text-green-600 mb-2">Collaborative Filtering</h4>
              <p className="text-sm text-gray-600">
                Finds users with similar preferences and recommends movies they enjoyed. Based on the wisdom of the crowd.
              </p>
            </div>
            <div>
              <h4 className="font-semibold text-purple-600 mb-2">Hybrid Approach</h4>
              <p className="text-sm text-gray-600">
                Combines both methods to provide more diverse and accurate recommendations, leveraging the strengths of each approach.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MovieRecommendationSystem;
